import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:get/get.dart';

import 'package:lms/src/presentation/presentation.dart';
import 'package:lms/src/resource/resource.dart';
import 'package:lms/src/utils/app_prefs.dart';
import 'package:lms/src/utils/app_utils.dart';
import 'package:toastification/toastification.dart';

class CourseCommentViewModel extends BaseViewModel with StompListener {
  late StompService stompService;
  StudentModel? student;
  TextEditingController commentController = TextEditingController();
  ValueNotifier<List<CommentModel>?> comments = ValueNotifier(null);
  ValueNotifier<CommentModel?> commentSelected = ValueNotifier(null);
  ValueNotifier<bool> canSend = ValueNotifier(false);
  ValueNotifier<String?> animatedCommentId = ValueNotifier(null);
  ValueNotifier<String?> animatedReplyId = ValueNotifier(null);
  ValueNotifier<ChapterModel?> chapterCurrent = ValueNotifier(null);
  ValueNotifier<CourseDetailModel?> courseDetailCurrent = ValueNotifier(null);

  // Th√™m ScrollController cho comments
  final ScrollController commentsScrollController = ScrollController();

  bool hasMoreComments = true;
  bool isLoadingComments = false;
  int commentPageSize = 10;

  init() async {
    chapterCurrent.value = Get.arguments['chapter'];
    courseDetailCurrent.value = Get.arguments['courseDetail'];
    student = AppPrefs.getUser<StudentModel>(StudentModel.fromJson);
    // Thi·∫øt l·∫≠p k·∫øt n·ªëi socket
    commentsScrollController.addListener(_scrollListener);
    await setupSocket();
    // Kh·ªüi t·∫°o l·∫°i c√°c ValueNotifier n·∫øu c·∫ßn
    if (!animatedCommentId.hasListeners) {
      animatedCommentId = ValueNotifier(null);
    }
    if (!animatedReplyId.hasListeners) {
      animatedReplyId = ValueNotifier(null);
    }
  }

  void _scrollListener() {
    if (commentsScrollController.position.pixels >= commentsScrollController.position.maxScrollExtent - 300) {
      loadMoreComments();
    }
  }

  Future<void> setupSocket() async {
    try {
      // Kh·ªüi t·∫°o ho·∫∑c l·∫•y instance c·ªßa StompService
      stompService = await StompService.instance();

      // ƒêƒÉng k√Ω listener cho t·ª´ng lo·∫°i k√™nh, x·ª≠ l√Ω l·ªói ri√™ng cho t·ª´ng lo·∫°i
      logger.i("B·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω c√°c listener cho socket");

      try {
        stompService.registerListener(type: StompListenType.comment, listener: this);
        logger.i("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng listener cho StompListenType.comment");
      } catch (e) {
        logger.e("‚ùå L·ªói khi ƒëƒÉng k√Ω listener cho StompListenType.comment: $e");
      }

      try {
        stompService.registerListener(type: StompListenType.editComment, listener: this);
        logger.i("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng listener cho StompListenType.editComment");
      } catch (e) {
        logger.e("‚ùå L·ªói khi ƒëƒÉng k√Ω listener cho StompListenType.editComment: $e");
      }

      try {
        stompService.registerListener(type: StompListenType.reply, listener: this);
        logger.i("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng listener cho StompListenType.reply");
      } catch (e) {
        logger.e("‚ùå L·ªói khi ƒëƒÉng k√Ω listener cho StompListenType.reply: $e");
      }

      try {
        stompService.registerListener(type: StompListenType.editReply, listener: this);
        logger.i("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng listener cho StompListenType.editReply");
      } catch (e) {
        logger.e("‚ùå L·ªói khi ƒëƒÉng k√Ω listener cho StompListenType.editReply: $e");
      }

      logger.i("üöÄ Socket ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi v√† ƒëƒÉng k√Ω t·∫•t c·∫£ listener th√†nh c√¥ng");
    } catch (e) {
      logger.e("‚õî L·ªói khi thi·∫øt l·∫≠p k·∫øt n·ªëi socket: $e");
    }
  }

  void selectComment({CommentModel? comment}) {
    commentSelected.value = comment;
    commentSelected.notifyListeners();
  }

  Future<void> send({CommentModel? comment}) async {
    if (comment == null) {
      logger.i('ƒêang g·ª≠i comment m·ªõi');
      logger.i('Student info: ${student}');
      try {
        final payload = {
          'chapterId': chapterCurrent.value?.id,
          'courseId': courseDetailCurrent.value?.id ?? '',
          'username': student?.email ?? '',
          'detail': commentController.text,
        };

        stompService.send(
          StompListenType.comment,
          jsonEncode(payload),
        );
        commentController.clear();
      } catch (e) {
        logger.e("L·ªói khi g·ª≠i comment: $e");
        showToast(title: "G·ª≠i th·∫•t b·∫°i!!!", type: ToastificationType.error);
      }
    } else {
      logger.i('ƒêang g·ª≠i reply cho comment: ${commentSelected.value?.username}');
      try {
        logger.i('Comment ƒë∆∞·ª£c ch·ªçn: ${commentSelected.value}');
        final payload = {
          'replyUsername': student?.email,
          'ownerUsername': commentSelected.value?.username,
          'chapterId': chapterCurrent.value?.id,
          'courseId': courseDetailCurrent.value?.id ?? '',
          'detail': commentController.text,
          'parentCommentId': commentSelected.value?.commentId,
        };

        logger.i('G·ª≠i reply ƒë·∫øn /app/comment-reply: ${jsonEncode(payload)}');
        stompService.send(
          StompListenType.reply,
          jsonEncode(payload),
        );
        commentController.clear();
      } catch (e) {
        logger.e("L·ªói khi g·ª≠i reply: $e");
        showToast(title: "G·ª≠i ph·∫£n h·ªìi th·∫•t b·∫°i!!!", type: ToastificationType.error);
      }
    }
    setCommentSelected();
  }

  // H√†m thi·∫øt l·∫≠p comment ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ ph·∫£n h·ªìi
  void setCommentSelected({CommentModel? comment}) {
    commentSelected.value = comment;
    commentSelected.notifyListeners();
  }

  Future<void> loadComments({bool isReset = false, int? pageSize}) async {
    if (isReset) {
      hasMoreComments = true;
      comments.value = null;
    }

    if (!hasMoreComments || isLoadingComments) return;

    isLoadingComments = true;
    notifyListeners();

    try {
      final String? courseId = courseDetailCurrent.value?.id;
      final String? chapterId = chapterCurrent.value?.id;

      if (courseId == null || chapterId == null) {
        logger.e("Kh√¥ng th·ªÉ t·∫£i comments: courseId ho·∫∑c chapterId kh√¥ng t·ªìn t·∫°i");
        isLoadingComments = false;
        notifyListeners();
        return;
      }

      // S·ª≠ d·ª•ng pageSize t·ª´ tham s·ªë n·∫øu c√≥, ng∆∞·ª£c l·∫°i d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh
      final int effectivePageSize = pageSize ?? commentPageSize;

      // T√≠nh to√°n pageNumber d·ª±a tr√™n k√≠ch th∆∞·ªõc hi·ªán t·∫°i c·ªßa danh s√°ch comments
      final int pageNumber = (comments.value?.length ?? 0);

      logger.i("T·∫£i comments cho chapter: $chapterId, pageNumber: $pageNumber, pageSize: $effectivePageSize");

      final NetworkState<List<CommentModel>> result = await commentRepository.commentInChapter(
        chapterId: chapterId,
        pageSize: effectivePageSize,
        pageNumber: pageNumber,
      );

      if (result.isSuccess && result.result != null) {
        final List<CommentModel> newComments = result.result!;
        logger.i("ƒê√£ t·∫£i ${newComments.length} comments");

        if (isReset || comments.value == null) {
          comments.value = newComments;
        } else {
          final existingComments = List<CommentModel>.from(comments.value!);

          // Lo·∫°i b·ªè c√°c comment tr√πng l·∫∑p
          final updatedComments = [...existingComments];
          for (final comment in newComments) {
            if (!existingComments.any((c) => c.commentId == comment.commentId)) {
              updatedComments.add(comment);
            }
          }

          comments.value = updatedComments;
        }

        // Ki·ªÉm tra xem c√≤n comments ƒë·ªÉ t·∫£i kh√¥ng
        hasMoreComments = newComments.length >= effectivePageSize;

        // C·∫≠p nh·∫≠t UI
        comments.notifyListeners();
      }
    } catch (e) {
      logger.e("L·ªói khi t·∫£i b√¨nh lu·∫≠n: $e");
    } finally {
      isLoadingComments = false;
      notifyListeners();
    }
  }

  // H√†m t·∫£i th√™m comments
  Future<void> loadMoreComments() async {
    await loadComments();
  }

  // H√†m t·∫£i th√™m replies cho m·ªôt comment c·ª• th·ªÉ
  Future<void> loadMoreReplies({required String commentId}) async {
    if (comments.value == null) return;

    try {
      // T√¨m comment hi·ªán t·∫°i
      final existingComments = List<CommentModel>.from(comments.value!);
      final commentIndex = existingComments.indexWhere((c) => c.commentId == commentId);

      if (commentIndex == -1) return;

      final comment = existingComments[commentIndex];

      // S·ª≠ d·ª•ng ch√≠nh x√°c s·ªë l∆∞·ª£ng replies hi·ªán t·∫°i l√†m pageNumber
      final int currentRepliesCount = comment.commentReplyResponses?.length ?? 0;

      logger.i("T·∫£i replies cho comment: $commentId, pageNumber: $currentRepliesCount");

      final NetworkState<List<ReplyModel>> result = await commentRepository.getReplies(
        commentId: commentId,
        replyPageSize: 5, // S·ªë l∆∞·ª£ng replies m·ªói l·∫ßn t·∫£i
        pageNumber: currentRepliesCount,
      );

      if (result.isSuccess && result.result != null) {
        final List<ReplyModel> newReplies = result.result!;
        logger.i("ƒê√£ t·∫£i ${newReplies.length} replies");

        // Lo·∫°i b·ªè c√°c reply tr√πng l·∫∑p
        final List<ReplyModel> uniqueNewReplies = [];
        for (final newReply in newReplies) {
          if (!(comment.commentReplyResponses ?? [])
              .any((existingReply) => existingReply.commentReplyId == newReply.commentReplyId)) {
            uniqueNewReplies.add(newReply);
          }
        }

        // C·∫≠p nh·∫≠t comment v·ªõi replies m·ªõi
        final updatedComment = comment.copyWith(
          commentReplyResponses: [
            ...(comment.commentReplyResponses ?? []),
            ...uniqueNewReplies,
          ],
        );

        // C·∫≠p nh·∫≠t danh s√°ch comments
        existingComments[commentIndex] = updatedComment;
        comments.value = existingComments;
        comments.notifyListeners();
      }
    } catch (e) {
      logger.e("L·ªói khi t·∫£i ph·∫£n h·ªìi: $e");
    }
  }

  void safelyUpdateNotifier<T>(ValueNotifier<T> notifier, T value) {
    // Ki·ªÉm tra tr√πng l·∫∑p d·ªØ li·ªáu tr∆∞·ªõc khi c·∫≠p nh·∫≠t
    if (notifier.value == value) {
      logger.i("D·ªØ li·ªáu kh√¥ng thay ƒë·ªïi, b·ªè qua c·∫≠p nh·∫≠t ValueNotifier");
      return;
    }

    notifier.value = value;
    try {
      notifier.notifyListeners();
      logger.i("ƒê√£ c·∫≠p nh·∫≠t ValueNotifier th√†nh c√¥ng");
    } catch (e) {
      logger.e("L·ªói update ValueNotifier: $e");
    }
  }

  // C√°c h√†m x·ª≠ l√Ω socket nh·∫≠n comment, reply
  @override
  void onStompCommentReceived(dynamic body) {
    if (body == null) {
      return;
    }

    try {
      final Map<String, dynamic> data = jsonDecode(body);
      logger.i("Ph·∫£n h·ªìi comment t·ª´ server: ${data.toString()}");

      // Kh·ªüi t·∫°o bi·∫øn comment
      CommentModel comment;

      // Ki·ªÉm tra c·∫•u tr√∫c JSON ƒë·ªÉ x√°c ƒë·ªãnh ph∆∞∆°ng th·ª©c t·∫°o CommentModel th√≠ch h·ª£p
      if (data['result']['updateDate'] != null) {
        // Tr∆∞·ªùng h·ª£p ch·ªânh s·ª≠a comment (c√≥ updateDate - lastUpdate)
        comment = CommentModel(
          countOfReply: data['result']['countOfReply'],
          courseId: data['result']['courseId'],
          commentId: data['result']['commentId'],
          username: data['result']['usernameOwner'],
          avatar: data['result']['avatarOwner'],
          fullname: data['result']['fullnameOwner'],
          chapterId: data['result']['chapterId'],
          createdDate: data['result']["createdDate"] == null
              ? null
              : AppUtils.fromUtcStringToVnTime(data['result']["createdDate"]),
          detail: data['result']['newDetail'],
          lastUpdate: data['result']["updateDate"] == null
              ? null
              : AppUtils.fromUtcStringToVnTime(data['result']["updateDate"]),
        );

        // T√¨m v√† c·∫≠p nh·∫≠t comment trong danh s√°ch
        _updateExistingComment(comment);
      } else {
        // Tr∆∞·ªùng h·ª£p comment m·ªõi (kh√¥ng c√≥ updateDate)
        comment = CommentModel.fromJson(data['result']);
        // Th√™m comment m·ªõi v√†o ƒë·∫ßu danh s√°ch
        _addNewComment(comment);
      }

      // Set animated comment ID cho hi·ªáu ·ª©ng highlight - th√™m ki·ªÉm tra _isDisposed
      // if (!_isDisposed) {
      safelyUpdateNotifier(animatedCommentId, comment.commentId);

      Future.delayed(Duration(seconds: 2), () {
        safelyUpdateNotifier(animatedCommentId, null);
      });
      // }
    } catch (e) {
      logger.e("L·ªói khi x·ª≠ l√Ω comment t·ª´ socket: $e");
    }
  }

  void _updateExistingComment(CommentModel updatedComment) {
    if (comments.value == null) return;

    final List<CommentModel> currentComments = List.from(comments.value!);
    final int index = currentComments.indexWhere((comment) => comment.commentId == updatedComment.commentId);

    if (index != -1) {
      // C·∫≠p nh·∫≠t n·ªôi dung comment nh∆∞ng gi·ªØ nguy√™n replies
      final CommentModel existingComment = currentComments[index];
      final updatedWithExistingReplies = updatedComment.copyWith(
        commentReplyResponses: existingComment.commentReplyResponses,
      );

      currentComments[index] = updatedWithExistingReplies;
      comments.value = currentComments;
      comments.notifyListeners();
    }
  }

  @override
  void onStompReplyReceived(dynamic body) {
    if (body == null) {
      return;
    }

    try {
      final Map<String, dynamic> data = jsonDecode(body);
      logger.i("Ph·∫£n h·ªìi reply t·ª´ server: ${data.toString()}");

      String actualParentCommentId = "";
      // Kh·ªüi t·∫°o bi·∫øn comment
      ReplyModel reply;

      // Ki·ªÉm tra c·∫•u tr√∫c JSON ƒë·ªÉ x√°c ƒë·ªãnh ph∆∞∆°ng th·ª©c t·∫°o CommentModel th√≠ch h·ª£p
      if (data['result']['updateDate'] != null) {
        // Tr∆∞·ªùng h·ª£p ch·ªânh s·ª≠a reply (c√≥ updateDate - lastUpdate)
        // L·∫•y ID ch√≠nh x√°c c·ªßa comment cha t·ª´ comments hi·ªán t·∫°i
        final String replyId = data['result']['commentReplyId'];

        // T√¨m commentId ch√≠nh x√°c t·ª´ comments hi·ªán t·∫°i
        if (comments.value != null) {
          for (var comment in comments.value!) {
            final replies = comment.commentReplyResponses ?? [];
            for (var existingReply in replies) {
              if (existingReply.commentReplyId == replyId) {
                actualParentCommentId = comment.commentId ?? "";
                break;
              }
            }
            if (actualParentCommentId.isNotEmpty) break;
          }
        }

        reply = ReplyModel(
          commentReplyId: replyId,
          commentId: actualParentCommentId,
          detail: data['result']['newDetail'],
          createdDate: data['result']["createdDate"] == null
              ? null
              : AppUtils.fromUtcStringToVnTime(data['result']["createdDate"]),
          avatarReply: data['result']['avatarReply'],
          fullnameOwner: data['result']['fullnameOwner'],
          fullnameReply: data['result']['fullnameReply'],
          replyCount: data['result']['replyCount'],
          usernameOwner: data['result']['usernameOwner'],
          usernameReply: data['result']['usernameReply'],
          lastUpdate: data['result']["updateDate"] == null
              ? null
              : AppUtils.fromUtcStringToVnTime(data['result']["updateDate"]),
        );

        // T√¨m v√† c·∫≠p nh·∫≠t reply trong danh s√°ch
        _updateExistingReply(reply, actualParentCommentId);
      } else {
        // Tr∆∞·ªùng h·ª£p reply m·ªõi (kh√¥ng c√≥ updateDate)
        reply = ReplyModel.fromJson(data['result']);
        actualParentCommentId = data['result']['commentId'];

        // Th√™m reply m·ªõi v√†o comment cha
        _addNewReply(reply, actualParentCommentId);
      }

      // Set animated reply ID cho hi·ªáu ·ª©ng highlight - s·ª≠ d·ª•ng safelyUpdateNotifier ƒë·ªÉ tr√°nh l·ªói

      safelyUpdateNotifier(animatedReplyId, reply.commentReplyId);

      Future.delayed(Duration(seconds: 2), () {
        safelyUpdateNotifier(animatedReplyId, null);
      });
    } catch (e) {
      logger.e("L·ªói khi x·ª≠ l√Ω reply t·ª´ socket: $e");
    }
  }

// H√†m h·ªó tr·ª£ th√™m comment m·ªõi v√†o danh s√°ch
  void _addNewComment(CommentModel newComment) {
    if (comments.value == null) {
      comments.value = [newComment];
    } else {
      // Ki·ªÉm tra xem comment ƒë√£ t·ªìn t·∫°i ch∆∞a
      final List<CommentModel> currentComments = List.from(comments.value!);
      final bool exists = currentComments.any((comment) => comment.commentId == newComment.commentId);

      if (!exists) {
        comments.value = [newComment, ...currentComments];
      }
    }

    comments.notifyListeners();
  }

// H√†m h·ªó tr·ª£ th√™m reply m·ªõi v√†o comment cha
  void _addNewReply(ReplyModel newReply, String parentCommentId) {
    if (comments.value == null) return;

    final List<CommentModel> currentComments = List.from(comments.value!);
    final int commentIndex = currentComments.indexWhere((comment) => comment.commentId == parentCommentId);

    if (commentIndex != -1) {
      final CommentModel parentComment = currentComments[commentIndex];

      // Ki·ªÉm tra xem reply ƒë√£ t·ªìn t·∫°i ch∆∞a
      final List<ReplyModel> existingReplies = parentComment.commentReplyResponses ?? [];
      final bool replyExists = existingReplies.any((reply) => reply.commentReplyId == newReply.commentReplyId);

      if (!replyExists) {
        // T·∫°o b·∫£n sao c·ªßa comment cha v·ªõi danh s√°ch replies ƒë√£ c·∫≠p nh·∫≠t
        final CommentModel updatedParentComment = parentComment.copyWith(
          countOfReply: newReply.replyCount,
        );

        // C·∫≠p nh·∫≠t comment trong danh s√°ch
        currentComments[commentIndex] = updatedParentComment;
        comments.value = currentComments;

        comments.notifyListeners();
      }
    }
  }

// H√†m h·ªó tr·ª£ c·∫≠p nh·∫≠t reply ƒë√£ t·ªìn t·∫°i
  void _updateExistingReply(ReplyModel updatedReply, String parentCommentId) {
    if (comments.value == null) return;

    final List<CommentModel> currentComments = List.from(comments.value!);
    final int commentIndex = currentComments.indexWhere((comment) => comment.commentId == parentCommentId);

    if (commentIndex != -1) {
      final CommentModel parentComment = currentComments[commentIndex];
      final List<ReplyModel> replies = parentComment.commentReplyResponses ?? [];

      final int replyIndex = replies.indexWhere((reply) => reply.commentReplyId == updatedReply.commentReplyId);

      if (replyIndex != -1) {
        // T·∫°o b·∫£n sao danh s√°ch replies v√† c·∫≠p nh·∫≠t reply
        final List<ReplyModel> updatedReplies = List.from(replies);
        updatedReplies[replyIndex] = updatedReply;

        // T·∫°o b·∫£n sao c·ªßa comment cha v·ªõi danh s√°ch replies ƒë√£ c·∫≠p nh·∫≠t
        final CommentModel updatedParentComment = parentComment.copyWith(
          commentReplyResponses: updatedReplies,
        );

        // C·∫≠p nh·∫≠t comment trong danh s√°ch
        currentComments[commentIndex] = updatedParentComment;
        comments.value = currentComments;

        comments.notifyListeners();
      }
    }
  }

// H√†m reset tr·∫°ng th√°i c·ªßa comment khi BottomSheet ƒë∆∞·ª£c ƒë√≥ng
  void resetCommentState() {
    logger.i("Reset tr·∫°ng th√°i comment");
    hasMoreComments = true;
    isLoadingComments = false;
    comments.value = null;
    commentSelected.value = null;
    commentController.clear();

    // ƒê·∫£m b·∫£o UI ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    comments.notifyListeners();
    commentSelected.notifyListeners();
  }

  Future<void> editComment({required String commentId, required String detail}) async {
    try {
      stompService.send(
        StompListenType.editComment,
        jsonEncode({
          'commentId': commentId,
          'usernameOwner': student?.email ?? '',
          'newDetail': detail,
        }),
      );
    } catch (e) {
      showToast(title: "Ch·ªânh s·ª≠a b√¨nh lu·∫≠n th·∫•t b·∫°i!", type: ToastificationType.error);
      logger.e("L·ªói khi ch·ªânh s·ª≠a comment: $e");
    }
  }

  Future<void> editReply({required String replyId, required String parentCommentId, required String detail}) async {
    await StompService.instance();

    try {
      stompService.send(
        StompListenType.editReply,
        jsonEncode({
          'commentReplyId': replyId,
          'usernameReply': student?.email ?? '',
          'newDetail': detail,
        }),
      );
    } catch (e) {
      showToast(title: "Ch·ªânh s·ª≠a ph·∫£n h·ªìi th·∫•t b·∫°i!", type: ToastificationType.error);
      logger.e("L·ªói khi ch·ªânh s·ª≠a reply: $e");
    }
  }

// Th√™m ph∆∞∆°ng th·ª©c h·ªßy ƒëƒÉng k√Ω ri√™ng ƒë·ªÉ c√≥ th·ªÉ g·ªçi t·ª´ nhi·ªÅu n∆°i
  void unregisterStompListeners() {
    if (stompService != null) {
      try {
        logger.i("H·ªßy ƒëƒÉng k√Ω t·∫•t c·∫£ listener");
        stompService.unregisterListener(type: StompListenType.comment, listener: this);
        stompService.unregisterListener(type: StompListenType.editComment, listener: this);
        stompService.unregisterListener(type: StompListenType.reply, listener: this);
        stompService.unregisterListener(type: StompListenType.editReply, listener: this);
      } catch (e) {
        logger.e("L·ªói khi h·ªßy ƒëƒÉng k√Ω listener: $e");
      }
    }
  }

  void setCanSend(bool can) {
    canSend.value = can;
  }
}
